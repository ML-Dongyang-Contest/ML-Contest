[기본 코드] (10번씩 돌렸을 때)   
map1 : 71.5   
map2 : 236.8   
map3 : 157.0   
map4 : 164.0   
map5 : 291.0   
map6 : 346.0   
map7 : 72.0   
map8 : 202.75   
map9 : 205.0   
map10 : 결과 없음   
map11 : 결과 없음   
-> 1, 7번 맵에서 강점을 보임을 알 수 있음.   
   
※ 여기에 나와있는 순서는 정리하기 위해 적어둔 것일 뿐 실행한 순서대로 작성한 것이 아님 ※   
   
1. 비선형적 방법을 이용하기 위한 사인(sin)함수 활용  
거리 : −100, −20, 70, 130, 170, 200   
각도 : -30, -18, -6, 6, 18, 30 (기본값)   
-> 164.244   

2. 1번에서 거리값을 임의로 완화시킴   
거리 : -100, -40, 20, 80, 140, 200
각도 : -30, -18, -6, 6, 18, 30 (기본값)   
-> 170.76744
   
3. 각도를 2의 배수로 늘리는 방식으로 변경 (ex. 2, 4, 8, 16...)   
그에 맞게 거리 값 수정 작업   
거리 : -100, -25, 25, 200 
각도 : -30, -14, -6, -2, 0, 2, 6, 14, 30   
-> 163.77272727

4. 3번에서 거리 단위 수정 
그에 맞게 거리 값 수정 작업   
거리 : -30, 10, 80, 200
각도 : -30, -14, -6, -2, 0, 2, 6, 14, 30   
-> 195.10869565
   
5. 1번에서 거리값을 임의로 완화시킴   
거리 : -100, -40, 20, 80, 140, 200
각도 : -30, -18, -6, 6, 18, 30 (기본값)   
-> 170.76744

6. 액션 맵을 굳이 일정하게 해야할까?   
거리 10씩 조절 / 각도 5씩 조절 / 하나씩 매칭
actions_map = {   
    0: [-100, -30],  1: [-90, -25],  2: [-80, -20],  3: [-70, -15],  4: [-60, -10],  5: [-50, -5],   
    6: [-40, 0],     7: [-30, 5],    8: [-20, 10],   9: [-10, 15],   10: [0, 20],    11: [10, 25],   
    12: [20, 30],    13: [30, -25],   14: [40, -20],  15: [50, -15],  16: [60, -10],   17: [70, -5],   
    18: [80, 0],     19: [90, 5],     20: [100, 10],  21: [110, 15],  22: [120, 20],   23: [130, 25],   
    24: [140, 30],   25: [150, -30],  26: [160, -25],  27: [170, -20],  28: [180, -15],  29: [190, -10],   
    30: [200, -5],   31: [200, 0],    32: [190, 5],   33: [180, 10],  34: [170, 15],   35: [160, 20]   
}   
-> 223.51162790697674
